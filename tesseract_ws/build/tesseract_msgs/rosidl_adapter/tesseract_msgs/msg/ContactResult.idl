// generated from rosidl_adapter/resource/msg.idl.em
// with input from tesseract_msgs/msg/ContactResult.msg
// generated code does not contain a copyright notice

#include "builtin_interfaces/msg/Time.idl"
#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Vector3.idl"

module tesseract_msgs {
  module msg {
    typedef uint8 uint8__2[2];
    typedef string string__2[2];
    typedef uint64 uint64__2[2];
    typedef geometry_msgs::msg::Vector3 geometry_msgs__msg__Vector3;
    typedef geometry_msgs__msg__Vector3 geometry_msgs__msg__Vector3__2[2];
    typedef geometry_msgs::msg::Pose geometry_msgs__msg__Pose;
    typedef geometry_msgs__msg__Pose geometry_msgs__msg__Pose__2[2];
    typedef double double__2[2];
    module ContactResult_Constants {
      const uint8 CCTYPE_NONE = 0;
      const uint8 CCTYPE_TIME0 = 1;
      const uint8 CCTYPE_TIME1 = 2;
      const uint8 CCTYPE_BETWEEN = 3;
    };
    struct ContactResult {
      builtin_interfaces::msg::Time stamp;

      double distance;

      uint8__2 type_id;

      @verbatim (language="comment", text=
        "The two links that are in contact")
      string__2 link_names;

      @verbatim (language="comment", text=
        "The two shapes that are in contact. Each link can be made up of multiple shapes")
      uint64__2 shape_id;

      @verbatim (language="comment", text=
        "If mesh or octomap this will be the voxel/triangle index")
      uint64__2 subshape_id;

      @verbatim (language="comment", text=
        "The nearest point on both links in world coordinates")
      geometry_msgs__msg__Vector3__2 nearest_points;

      @verbatim (language="comment", text=
        "The nearest point on both links in local(link) coordinates")
      geometry_msgs__msg__Vector3__2 nearest_points_local;

      @verbatim (language="comment", text=
        "Transform of link_names at time step 0")
      geometry_msgs__msg__Pose__2 transform;

      @verbatim (language="comment", text=
        "The normal vector to move the two objects out of contact in world coordinates")
      geometry_msgs::msg::Vector3 normal;

      @verbatim (language="comment", text=
        "The time at contact during continuous collision checking")
      double__2 cc_time;

      @verbatim (language="comment", text=
        "CCTYPE_NONE = 0, CCTYPE_TIME0 = 1, CCTYPE_TIME1 = 2, CCTYPE_BETWEEN = 3")
      uint8__2 cc_type;

      @verbatim (language="comment", text=
        "Transform of link_names at time step 1")
      geometry_msgs__msg__Pose__2 cc_transform;
    };
  };
};
